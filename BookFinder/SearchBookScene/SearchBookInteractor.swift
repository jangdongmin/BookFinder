//
//  SearchBookInteractor.swift
//  BookFinder
//
//  Created by Paul Jang on 2020/08/19.
//  Copyright (c) 2020 Paul Jang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON
protocol SearchBookBusinessLogic
{
    func searchBook(request: BookInfo.Request, completion: @escaping (Result<[BookInfo.BookModel], Error>) -> Void)
    func dataClear()
}

protocol SearchBookDataStore
{
    var bookModel: [BookInfo.BookModel] { get set }
    var totalItems: Int { get set }
}

class SearchBookInteractor: SearchBookBusinessLogic, SearchBookDataStore
{
    var bookModel = [BookInfo.BookModel]()
    var totalItems: Int = 0
    
    var presenter: SearchBookPresentationLogic?
    var worker: SearchBookWorker?
    
    // MARK: Do something
     
    func searchBook(request: BookInfo.Request, completion: @escaping ((Result<[BookInfo.BookModel], Error>) -> Void)) {
        worker = SearchBookWorker()
        worker?.search(keyword: request.q, page: request.page) { result in
            switch result {
            case .success(let books):
                let json = JSON(books)["items"]
                
                if request.page == 0 {
                    self.totalItems = JSON(books)["totalItems"].intValue
                    self.bookModel.removeAll()
                }
                 
                for (_, subJson) : ( String , JSON) in json {
                    let volumeInfo = subJson["volumeInfo"]
                    let thumbnail = volumeInfo["imageLinks"]["thumbnail"].stringValue
                    let title = volumeInfo["title"].stringValue
                    let publishedDate = volumeInfo["publishedDate"].stringValue
                    let authors = volumeInfo["authors"].arrayObject as? [String]
                    
                    let pageCount = volumeInfo["pageCount"].intValue
                    let subtitle = volumeInfo["subtitle"].stringValue
                    let publisher = volumeInfo["publisher"].stringValue
                    let description = volumeInfo["description"].stringValue
                    
                    self.bookModel.append(BookInfo.BookModel(title: title, author: authors ?? [], publishedDate: publishedDate, thumbnail: thumbnail, pageCount: pageCount, subtitle: subtitle, publisher: publisher, description: description))
                }
                 
                let response = BookInfo.Response(totalItems: self.totalItems, bookModel: self.bookModel, page: request.page)
                self.presenter?.presentBookList(response: response)
                
                completion(.success(self.bookModel))
            case .failure(let error):
                print(error.localizedDescription)
                completion(.failure(error))
            }
        }
    }
    
    func dataClear() {
        self.bookModel.removeAll()
        let response = BookInfo.Response(totalItems: 0, bookModel: self.bookModel, page: 0)
        self.presenter?.presentBookList(response: response)
    }
}
