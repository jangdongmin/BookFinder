//
//  SearchBookViewController.swift
//  BookFinder
//
//  Created by Paul Jang on 2020/08/19.
//  Copyright (c) 2020 Paul Jang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchBookDisplayLogic: class
{
    func displayBookList(viewModel: BookInfo.ViewModel)
//    func pagingBookList(viewModel: BookModel.ViewModel)
}

class SearchBookViewController: UIViewController, SearchBookDisplayLogic
{
    @IBOutlet weak var indicator: UIActivityIndicatorView!
    @IBOutlet weak var bookListTableView: BookListTableView!
    @IBOutlet weak var resultCountLabel: UILabel!
    
    private let searchController: UISearchController = {
        let searchController = UISearchController(searchResultsController: nil)
        searchController.searchBar.placeholder = "책 검색"
        return searchController
    }()
    
    var interactor: SearchBookBusinessLogic?
    var router: (NSObjectProtocol & SearchBookRoutingLogic & SearchBookDataPassing)?
    var searchText = ""
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchBookInteractor()
        let presenter = SearchBookPresenter()
        let router = SearchBookRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupUI()
    }
    
    func setupUI() {
        bookListTableView.bookListTableViewDelegate = self
        
        searchController.searchBar.setValue("취소", forKey:"cancelButtonText")
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.delegate = self
        
        navigationItem.searchController = searchController
        navigationItem.title = "검색"
        navigationItem.hidesSearchBarWhenScrolling = false
        
        navigationController?.navigationBar.prefersLargeTitles = true
    }
    
    func displayBookList(viewModel: BookInfo.ViewModel) {
        indicator.isHidden = true
        bookListTableView.setData(viewModel: viewModel)
        resultCountLabel.text = "Results(\(viewModel.itemTotalCount))"
    } 
}

extension SearchBookViewController: UISearchBarDelegate, BookListTableViewDelegate {
    func select(index: Int) {
        router?.routeToDetail(index: index)
    }
    
    func nextPage(page: Int) {
        interactor?.searchBook(request: BookInfo.Request(q: self.searchText, page: page))
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let searchText = searchBar.text, !searchText.isEmpty else { return }
         
        indicator.isHidden = false
        self.searchText = searchText
        interactor?.searchBook(request: BookInfo.Request(q: searchText, page: 0))
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        self.searchText = ""
        interactor?.dataClear()
    }
}
